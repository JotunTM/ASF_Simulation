"""
=========================================
main file for simulation environment
=========================================
"""


"""
@author: Mauro Luzzatto 
@credits: Prageeth Jayathissa, Jerimias Schmidli

02.11.2016
"""


"""
Description of the code 


HOW TO USE:
- install sympy python module
- set values and run mainSimulationPlanarProjection file



VARIABLE DEFINITION

    PlanarProjectionSettings:

    ShadingCase = set shading cases, which shall be included in the radiation calculation. '1' = horizontal, '2' = diagonal, '3' = vertical (['1','2','3'])
    reflectance = set a reflectance value for the radiation calculation
    DistWindow = set the distance of the ASF from the glazed surface
    shadingPV = include shading in the PV calculation (True) or not (False)


    SimulationPeriod: 

    FromMonth = start month
    ToMonth = end month (for example to select only january, FromMonth = 1, Tomonth = 1)
    FromDay =  start day within a month
    ToDay = end day within a month (15. day of a month, FromDay = 15, ToDay = 15)
    FromHour': start hour of a day
    ToHour': end hour of a day (last hour is not included)


    SimulationData:
   
   optimization_Types = Decide for which energy demand type, you want to do the optimisation for, multiple options are possible.  ['E_total', 'Cooling', 'Heating', 'SolarEnergy', 'Lighting', 'E_HCL'] 
                       If all otpimization types are chosen, the azimuth and altitude angle plots are created as well. 
   
   DataFolderName = choose the name of the stored data, those only effects the radiaiton results generated by ladybug
   FileName = used for the PV results, enables to use same radiaiton data but with different configuration
   
   geoLocation = set the location which should be evaluated, make sure the correspoding .epw file is saved in the WeatherData folder
   EPWfile = use same file name as used in geolocation, but this is used for the ladybug calculation, same name and ending ".epw" is needed
   
   ShowFig = decide if you want to create (True) or not create (False) the figures
   Save =  decide if you want to save (True) or not save (False) the results
   
   PanelData:
   
   XANGLES = set the X-Angles of the ASF = [0, 15, 30, 45, 60, 75, 90] , 0 = closed, 90 = open
   YANGLES = set the Y-Angles of the ASF = [-45, -30,-15,0, 15, 30, 45] 
   NoClusters = option for using different multiple clusters
   numberHorizontal = number of panels in horizontal direction (columns)
   numberVertical = number of panels in vertical direction (rows)
   panelOffset = 
   panelSize = size of PV panel [mm]
   panelSpacing = diagonal distance betwee panels [mm]
   
   
   
   BuildingData:
   
   room_width, room_height, room_depth = room dimensons in mm
   glazing_percentage_w = perecentage of glazing of the total room width [%]
   glazing_percentage_h =  perecentage of glazing of the total room height [%]
   BuildingOrientation = building orientation of 0 corresponds to south facing, 90 is east facing, -90 is west facing
   
	
   
   BuildingProperties:
   
   glass_solar_transmitance: Fraction of Radiation transmitting through the window []
   glass_light_transmitance: Fraction of visible light (luminance) transmitting through the window []
   lighting_load: Lighting Load [W/m2] 
   lighting_control: Lux threshold at which the lights turn on [Lx]
   U_em: U value of opaque surfaces  [W/m2K]
   U_w: U value of glazed surfaces [W/m2K]
   ACH_vent: Air changes per hour through ventilation [Air Changes Per Hour]
   ACH_infl: Air changes per hour through infiltration [Air Changes Per Hour]
   ventilation_efficiency: The efficiency of the heat recovery system for ventilation. Set to 0 if there is no heat recovery []
   c_m_A_f: Thermal capacitance of the room per floor area [J/m2K] #capcitance of the building dependent on building type: medium = 165'000, heavy = 260'000, light = 110'000, very heavy = 370'000
   theta_int_h_set : Thermal heating set point [C]
   theta_int_c_set: Thermal cooling set point [C]
   phi_c_max_A_f: Maximum cooling load. Set to -np.inf for unresctricted cooling [C]
   phi_h_max_A_f: Maximum heating load. Set to no.inf for unrestricted heating [C]
   COP_H = heating cop
   COP_C = cooling cop

   
   SimulationOptions
   
   setBackTempH' = chose a setBackTemperature, it determines to what extend the building can heat up, when no people are in the building [°C]
   setBackTempC' = chose a setBackTemperature, it determines to what extend the building can cool down, when no people are in the building [°C]
   Occupancy'  = select occupancy profile file, 'Occupancy_COM.csv'
   ActuationEnergy = choose whether you want to include the the needed actuation energy for the ASF adjustment
   Temp_start = simulation starting Temperature [°C] 
   human_heat_emissions = heat emitted by a human body per hour. Source: HVAC Engineers Handbook, F. 
"""




import numpy as np
import pandas as pd
from buildingSystem import *  
from SimulationClassPlanarProjection import ASF_Simulation


PlanarProjectionSettings = {
'ShadingCase' : ['1','2','3'],
'reflectance' : 0,
'DistWindow' : 300, #Distance from the Glazed Surface
'shadingPV' : True }

SimulationPeriod = {
'FromMonth': 1, #7,
'ToMonth': 1, #7,
'FromDay': 8, #6,
'ToDay': 8, #6, 
'FromHour': 5,
'ToHour': 20}



#Set simulation data 
SimulationData= {
'optimizationTypes' : ['E_total', 'Heating'], 
'FileName' : 'WinterSunnyDay_PP', #'ZH13_49comb_SummerSunnyDay_PP',
'geoLocation' : 'Zuerich_Kloten_2013', 
'Save' : True, 
'ShowFig': True}  


 
PanelData = {
"XANGLES": [0, 15, 30, 45, 60, 75, 90],
"YANGLES" : [-45, -30,-15,0, 15, 30, 45],
"NoClusters":1,
"numberHorizontal":6,
"numberVertical":9,
"panelSize":400.,
"panelSpacing":500.}

#Set Building Parameters in [mm]
BuildingData={
"room_width": 4900,     
"room_height":3100,
"room_depth":7000,
"glazing_percentage_w": 0.92,
"glazing_percentage_h": 0.97,
"BuildingOrientation" : 0} 


BuildingProperties={
"glass_solar_transmitance" : 0.691 ,
"glass_light_transmitance" : 0.744 ,
"lighting_load" : 11.74 ,
"lighting_control" : 300,
"Lighting_Utilisation_Factor" :  0.75,
"Lighting_MaintenanceFactor" : 0.9,
"U_em" : 0.2, 
"U_w" : 1.1,
"ACH_vent" : 1.5,
"ACH_infl" : 0.5,
"ventilation_efficiency" : 0.6,
"c_m_A_f" : 165 * 10**3,
"theta_int_h_set" : 22,
"theta_int_c_set" : 26,
"phi_c_max_A_f": -np.inf,
"phi_h_max_A_f":np.inf,
"heatingSystem" : DirectHeater, #DirectHeater, #DirectHeater, #ResistiveHeater #HeatPumpHeater
"coolingSystem" : DirectCooler, #DirectCooler, #DirectCooler, #HeatPumpCooler
"heatingEfficiency" : 1,
"coolingEfficiency" :1,
'COP_H': 3,
'COP_C':3}
#
#Set simulation Properties
SimulationOptions= {
'setBackTempH' : 4.,
'setBackTempC' : 4.,
'Occupancy' : 'Occupancy_COM.csv',
'ActuationEnergy' : True,
'Temp_start' : 18,
'human_heat_emission' : 0.12} 
   
if __name__=='__main__':
    
    ASFtest = ASF_Simulation(SimulationPeriod = SimulationPeriod,
                             PlanarProjectionSettings = PlanarProjectionSettings,
                             SimulationData = SimulationData, 
                             PanelData = PanelData,
                             BuildingData = BuildingData,
                             BuildingProperties = BuildingProperties, 
                             SimulationOptions = SimulationOptions)
    ASFtest.SolveASF()
    res = ASFtest.ResultsPlanarProjection
    
    print ASFtest.TotalHourlyData
        
        
